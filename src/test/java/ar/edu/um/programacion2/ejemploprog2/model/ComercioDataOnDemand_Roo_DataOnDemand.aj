// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.ejemploprog2.model;

import ar.edu.um.programacion2.ejemploprog2.model.Comercio;
import ar.edu.um.programacion2.ejemploprog2.model.ComercioDataOnDemand;
import ar.edu.um.programacion2.ejemploprog2.model.TagsDataOnDemand;
import ar.edu.um.programacion2.ejemploprog2.model.UsuarioDataOnDemand;
import com.vividsolutions.jts.geom.Point;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ComercioDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ComercioDataOnDemand: @Component;
    
    private Random ComercioDataOnDemand.rnd = new SecureRandom();
    
    private List<Comercio> ComercioDataOnDemand.data;
    
    @Autowired
    TagsDataOnDemand ComercioDataOnDemand.tagsDataOnDemand;
    
    @Autowired
    UsuarioDataOnDemand ComercioDataOnDemand.usuarioDataOnDemand;
    
    public Comercio ComercioDataOnDemand.getNewTransientComercio(int index) {
        Comercio obj = new Comercio();
        setContacto(obj, index);
        setCorreo(obj, index);
        setDireccion(obj, index);
        setLocation(obj, index);
        setNombre(obj, index);
        setTelefono(obj, index);
        return obj;
    }
    
    public void ComercioDataOnDemand.setContacto(Comercio obj, int index) {
        String contacto = "contacto_" + index;
        obj.setContacto(contacto);
    }
    
    public void ComercioDataOnDemand.setCorreo(Comercio obj, int index) {
        String correo = "correo_" + index;
        obj.setCorreo(correo);
    }
    
    public void ComercioDataOnDemand.setDireccion(Comercio obj, int index) {
        String direccion = "direccion_" + index;
        obj.setDireccion(direccion);
    }
    
    public void ComercioDataOnDemand.setLocation(Comercio obj, int index) {
        Point location = null;
        obj.setLocation(location);
    }
    
    public void ComercioDataOnDemand.setNombre(Comercio obj, int index) {
        String nombre = "nombre_" + index;
        obj.setNombre(nombre);
    }
    
    public void ComercioDataOnDemand.setTelefono(Comercio obj, int index) {
        int telefono = index;
        obj.setTelefono(telefono);
    }
    
    public Comercio ComercioDataOnDemand.getSpecificComercio(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Comercio obj = data.get(index);
        Long id = obj.getId();
        return Comercio.findComercio(id);
    }
    
    public Comercio ComercioDataOnDemand.getRandomComercio() {
        init();
        Comercio obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Comercio.findComercio(id);
    }
    
    public boolean ComercioDataOnDemand.modifyComercio(Comercio obj) {
        return false;
    }
    
    public void ComercioDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Comercio.findComercioEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Comercio' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Comercio>();
        for (int i = 0; i < 10; i++) {
            Comercio obj = getNewTransientComercio(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
