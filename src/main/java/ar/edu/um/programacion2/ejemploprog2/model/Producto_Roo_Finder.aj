// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.ejemploprog2.model;

import ar.edu.um.programacion2.ejemploprog2.model.Comercio;
import ar.edu.um.programacion2.ejemploprog2.model.Producto;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Producto_Roo_Finder {
    
    public static Long Producto.countFindProductoesByUsuario(Comercio usuario) {
        if (usuario == null) throw new IllegalArgumentException("The usuario argument is required");
        EntityManager em = Producto.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Producto AS o WHERE o.usuario = :usuario", Long.class);
        q.setParameter("usuario", usuario);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Producto> Producto.findProductoesByUsuario(Comercio usuario) {
        if (usuario == null) throw new IllegalArgumentException("The usuario argument is required");
        EntityManager em = Producto.entityManager();
        TypedQuery<Producto> q = em.createQuery("SELECT o FROM Producto AS o WHERE o.usuario = :usuario", Producto.class);
        q.setParameter("usuario", usuario);
        return q;
    }
    
    public static TypedQuery<Producto> Producto.findProductoesByUsuario(Comercio usuario, String sortFieldName, String sortOrder) {
        if (usuario == null) throw new IllegalArgumentException("The usuario argument is required");
        EntityManager em = Producto.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Producto AS o WHERE o.usuario = :usuario");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Producto> q = em.createQuery(queryBuilder.toString(), Producto.class);
        q.setParameter("usuario", usuario);
        return q;
    }
    
}
