// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.programacion2.ejemploprog2.model;

import ar.edu.um.programacion2.ejemploprog2.model.Comercio;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Map;
import java.util.Set;
import javax.persistence.TypedQuery;
import org.apache.commons.lang3.StringUtils;
import org.gvnix.jpa.geo.hibernatespatial.util.GeometryFilter;

privileged aspect Comercio_Roo_GvNIXEntityMapLayer {
    
    public static <T> List<T> Comercio.findAllComerciosByGeoFilter(GeometryFilter geomFilter, Class<T> klass, Map<String, Object> hints, Iterable<String> fields, String scale) {
        StringBuilder jpql = new StringBuilder("SELECT ");
        if (klass == Comercio.class) {
            jpql.append(" o ");
        } else {
            jpql.append(" new ");
            jpql.append(klass.getName());
            jpql.append(" ( o ) ");
        }
        jpql.append("FROM Comercio o WHERE");
        if (geomFilter == null || geomFilter.isEmpty()) {
            Set<String> filters = new LinkedHashSet<String>();
            if (fields == null || !fields.iterator().hasNext()) {
                fields = Arrays.asList("location");
            }
            for(String field : fields) {
                 if ("location".equalsIgnoreCase(field)) {
                    filters.add(" o.location IS NOT NULL");
                }
                else {
                    throw new IllegalArgumentException(field.concat(" is not a geometry field"));
                }
            }
            jpql.append(StringUtils.join(filters," or "));
        }
        else {
            Set<String> filters = new LinkedHashSet<String>();
            if (fields == null || !fields.iterator().hasNext()) {
                fields = Arrays.asList("location");
            }
            for (String field : fields) {
                if("location".equalsIgnoreCase(field)) {
                    filters.add(geomFilter.toJPQLString("location", 0));
                }
                else {
                    throw new IllegalArgumentException(field.concat(" is not a geometry field"));
                }
            }
            jpql.append(StringUtils.join(filters," or "));
        }
        TypedQuery<T>  q = entityManager().createQuery(jpql.toString(), klass);
        if (geomFilter != null && !geomFilter.isEmpty()) {
            for (String field : fields) {
                if ("location".equalsIgnoreCase(field)) {
                    geomFilter.loadJPQLParams(q, "o.location");
                }
                else {
                    throw new IllegalArgumentException(field.concat(" is not a geometry field"));
                }
            }
        }
        if (hints != null && !hints.isEmpty()) {
            for (Entry<String, Object> entry : hints.entrySet()) {
                 q.setHint(entry.getKey(), entry.getValue());
            }
        }
        return q.getResultList();
    }
    
}
